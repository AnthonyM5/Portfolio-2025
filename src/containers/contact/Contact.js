import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { motion } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { useForm, ValidationError } from '@formspree/react';
import { portfolio } from '@/config/portfolio';
import './Contact.scss';
export var Contact = function () {
    var _a = useInView({
        threshold: 0.1,
        triggerOnce: true
    }), ref = _a.ref, inView = _a.inView;
    var _b = useForm("mjkyakgl"), state = _b[0], handleSubmit = _b[1];
    return (_jsx("section", { className: "contact-section", id: "contact", ref: ref, children: _jsxs("div", { className: "contact-container", children: [_jsx(motion.h2, { className: "section-title", initial: { opacity: 0, y: -20 }, animate: inView ? { opacity: 1, y: 0 } : { opacity: 0, y: -20 }, transition: { duration: 0.6 }, children: portfolio.contact.title }), _jsx(motion.p, { className: "section-subtitle", initial: { opacity: 0 }, animate: inView ? { opacity: 1 } : { opacity: 0 }, transition: { duration: 0.6, delay: 0.2 }, children: portfolio.contact.subtitle }), _jsxs("div", { className: "contact-content", children: [_jsxs(motion.div, { className: "contact-info", initial: { opacity: 0, x: -30 }, animate: inView ? { opacity: 1, x: 0 } : { opacity: 0, x: -30 }, transition: { duration: 0.6, delay: 0.3 }, children: [_jsxs("div", { className: "info-item", children: [_jsx("div", { className: "info-icon", children: _jsx("i", { className: "fas fa-map-marker-alt" }) }), _jsxs("div", { className: "info-content", children: [_jsx("h3", { children: "Location" }), _jsx("p", { children: portfolio.contact.location })] })] }), _jsxs("div", { className: "info-item", children: [_jsx("div", { className: "info-icon", children: _jsx("i", { className: "fas fa-envelope" }) }), _jsxs("div", { className: "info-content", children: [_jsx("h3", { children: "Email" }), _jsx("p", { children: _jsx("a", { href: "mailto:".concat(portfolio.contact.email), children: portfolio.contact.email }) })] })] }), _jsxs("div", { className: "info-item", children: [_jsx("div", { className: "info-icon", children: _jsx("i", { className: "fas fa-phone-alt" }) }), _jsxs("div", { className: "info-content", children: [_jsx("h3", { children: "Phone" }), _jsx("p", { children: _jsx("a", { href: "tel:".concat(portfolio.contact.phone), children: portfolio.contact.phone }) })] })] }), _jsx("div", { className: "social-links", children: portfolio.socialLinks.map(function (link, index) { return (_jsx("a", { href: link.url, target: "_blank", rel: "noreferrer", "aria-label": link.name, children: _jsx("i", { className: link.icon }) }, index)); }) })] }), _jsx(motion.div, { className: "contact-form-container", initial: { opacity: 0, x: 30 }, animate: inView ? { opacity: 1, x: 0 } : { opacity: 0, x: 30 }, transition: { duration: 0.6, delay: 0.3 }, children: state.succeeded ? (_jsxs("div", { className: "form-success-message", children: [_jsx("div", { className: "success-icon", children: _jsx("i", { className: "fas fa-check-circle" }) }), _jsx("h3", { children: "Message Sent!" }), _jsx("p", { children: "Thank you for reaching out. I'll get back to you as soon as possible!" })] })) : (_jsxs("form", { className: "contact-form", onSubmit: handleSubmit, children: [_jsxs("div", { className: "form-group", children: [_jsx("input", { type: "text", id: "name", name: "name", placeholder: "Your Name", required: true }), _jsx(ValidationError, { prefix: "Name", field: "name", errors: state.errors })] }), _jsxs("div", { className: "form-group", children: [_jsx("input", { type: "email", id: "email", name: "email", placeholder: "Your Email", required: true }), _jsx(ValidationError, { prefix: "Email", field: "email", errors: state.errors })] }), _jsxs("div", { className: "form-group", children: [_jsx("input", { type: "text", id: "subject", name: "subject", placeholder: "Subject", required: true }), _jsx(ValidationError, { prefix: "Subject", field: "subject", errors: state.errors })] }), _jsxs("div", { className: "form-group", children: [_jsx("textarea", { id: "message", name: "message", placeholder: "Your Message", required: true, rows: 6 }), _jsx(ValidationError, { prefix: "Message", field: "message", errors: state.errors })] }), _jsx("button", { type: "submit", className: "submit-btn", disabled: state.submitting, children: state.submitting ? 'Sending...' : 'Send Message' }), state.errors && Object.keys(state.errors).length > 0 && (_jsx("p", { className: "submit-message error", children: "There was an error submitting the form. Please check the fields and try again." }))] })) })] })] }) }));
};
export default Contact;
